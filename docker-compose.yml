version: '3.8'

services:
  # ===== 后端API服务 =====
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: smart-monitoring-backend
    ports:
      - "8000:8000"
    environment:
      - DEBUG=true
      - ENVIRONMENT=development
      - POSTGRES_SERVER=postgres
      - POSTGRES_USER=monitoring
      - POSTGRES_PASSWORD=monitoring123
      - POSTGRES_DB=smart_monitoring
      - REDIS_HOST=redis
      - PROMETHEUS_URL=http://prometheus:9090
      - SECRET_KEY=your-very-secure-secret-key-change-in-production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      prometheus:
        condition: service_started
    networks:
      - monitoring-network
    volumes:
      - ./backend:/app
      - backend-logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ===== 前端Web服务 =====
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: smart-monitoring-frontend
    ports:
      - "3000:80"
    environment:
      - VITE_API_BASE_URL=http://localhost:8000
      - VITE_PROMETHEUS_URL=http://localhost:9090
    depends_on:
      - backend
    networks:
      - monitoring-network
    restart: unless-stopped

  # ===== PostgreSQL数据库 =====
  postgres:
    image: postgres:15-alpine
    container_name: smart-monitoring-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=monitoring
      - POSTGRES_PASSWORD=monitoring123
      - POSTGRES_DB=smart_monitoring
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - monitoring-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U monitoring -d smart_monitoring"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ===== Redis缓存 =====
  redis:
    image: redis:7-alpine
    container_name: smart-monitoring-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redis123
    volumes:
      - redis-data:/data
    networks:
      - monitoring-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # ===== Prometheus监控 =====
  prometheus:
    image: prom/prometheus:latest
    container_name: smart-monitoring-prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    volumes:
      - ./deploy/prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    networks:
      - monitoring-network
    restart: unless-stopped

  # ===== Grafana可视化 =====
  grafana:
    image: grafana/grafana:latest
    container_name: smart-monitoring-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3001
    volumes:
      - grafana-data:/var/lib/grafana
      - ./deploy/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - monitoring-network
    restart: unless-stopped

  # ===== Node Exporter =====
  node-exporter:
    image: prom/node-exporter:latest
    container_name: smart-monitoring-node-exporter
    ports:
      - "9100:9100"
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - monitoring-network
    restart: unless-stopped

  # ===== Nginx反向代理 =====
  nginx:
    image: nginx:1.25-alpine
    container_name: smart-monitoring-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deploy/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./deploy/nginx/conf.d:/etc/nginx/conf.d
      - ./deploy/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - monitoring-network
    restart: unless-stopped

# ===== 网络配置 =====
networks:
  monitoring-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# ===== 数据卷 =====
volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  backend-logs:
    driver: local